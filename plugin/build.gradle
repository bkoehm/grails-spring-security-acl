buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
    }
}

plugins {
    id 'maven-publish'
    id 'groovy'
    id 'java-library'
    id 'signing'
}

version projectVersion
group "org.grails.plugins"

ext {
    isSnapshot = project.projectVersion.endsWith('-SNAPSHOT')
    isReleaseVersion = !isSnapshot
}

apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-gsp'

if (isReleaseVersion) {
    apply plugin: 'io.github.gradle-nexus.publish-plugin'

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    all {
        exclude group: 'javax.servlet'
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtimeOnly "org.grails:grails-plugin-services"
    runtimeOnly "org.grails:grails-plugin-domain-class"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"

    implementation "org.ehcache:ehcache:$ehcacheVersion"
    api "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"
    api "org.springframework.security:spring-security-acl:$springSecurityVersion"
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext.pomInfo = {
    delegate.name "Grails Spring Security ACL Plugin"
    delegate.description project.projectDesc
    delegate.url project.hasProperty('websiteUrl') ? project.websiteUrl : "http://grails-plugins.github.io/grails-spring-security-acl/"

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url project.hasProperty('vcsUrl') ? project.vcsUrl : "https://github.com/grails-plugins/grails-spring-security-acl"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    delegate.issueManagement {
        delegate.url project.issueTrackerUrl
        delegate.system 'GitHub'
    }

    if (developers) {
        delegate.developers {
            for (dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev
                }
            }
        }
    }
}

publishing {
    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                    password = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                }
                url "https://repo.grails.org/grails/plugins3-snapshots-local"
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId project.name
            version = project.version

            from components.java

            artifact sourcesJar
            artifact javadocJar
            artifact source: "${buildDir}/classes/groovy/main/META-INF/grails-plugin.xml",
                    classifier: "plugin",
                    extension: 'xml'

            pom.withXml {
                def xml = asNode()

                xml.children().last() + pomInfo
                // dependency management shouldn't be included
                def n = xml.get("dependencyManagement")
                if (n)
                    xml.remove(n)
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
